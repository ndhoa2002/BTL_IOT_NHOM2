 ================================================================================
                    LU·ªíNG CH·∫†Y CHI TI·∫æT D·ª∞ √ÅN IOT SMART HOME
================================================================================

üìã T·ªîNG QUAN D·ª∞ √ÅN:
D·ª± √°n IoT Smart Home l√† m·ªôt h·ªá th·ªëng gi√°m s√°t v√† ƒëi·ªÅu khi·ªÉn th√¥ng minh bao g·ªìm:
- Thi·∫øt b·ªã Arduino ESP8266 v·ªõi c·∫£m bi·∫øn DHT11, PIR motion sensor
- Backend Node.js v·ªõi MQTT broker, WebSocket, REST API
- Frontend React v·ªõi dashboard real-time
- Database MySQL ƒë·ªÉ l∆∞u tr·ªØ d·ªØ li·ªáu

üîÑ LU·ªíNG CH·∫†Y T·ªîNG TH·ªÇ:

1. KH·ªûI T·∫†O H·ªÜ TH·ªêNG
   ‚îú‚îÄ‚îÄ Arduino ESP8266 kh·ªüi ƒë·ªông
   ‚îú‚îÄ‚îÄ Backend Node.js server kh·ªüi ƒë·ªông
   ‚îú‚îÄ‚îÄ MQTT broker (Mosquitto) ch·∫°y
   ‚îú‚îÄ‚îÄ Database MySQL k·∫øt n·ªëi
   ‚îî‚îÄ‚îÄ Frontend React app load

2. K·∫æT N·ªêI M·∫†NG
   ‚îú‚îÄ‚îÄ Arduino k·∫øt n·ªëi WiFi
   ‚îú‚îÄ‚îÄ Arduino k·∫øt n·ªëi MQTT broker
   ‚îú‚îÄ‚îÄ Backend k·∫øt n·ªëi MQTT broker
   ‚îî‚îÄ‚îÄ Frontend k·∫øt n·ªëi WebSocket

3. LU·ªíNG D·ªÆ LI·ªÜU SENSOR
   ‚îú‚îÄ‚îÄ Arduino ƒë·ªçc c·∫£m bi·∫øn m·ªói 3 gi√¢y
   ‚îú‚îÄ‚îÄ G·ª≠i d·ªØ li·ªáu qua MQTT topics
   ‚îú‚îÄ‚îÄ Backend nh·∫≠n v√† x·ª≠ l√Ω d·ªØ li·ªáu
   ‚îú‚îÄ‚îÄ L∆∞u v√†o database
   ‚îî‚îÄ‚îÄ Broadcast qua WebSocket ƒë·∫øn Frontend

4. LU·ªíNG ƒêI·ªÄU KHI·ªÇN
   ‚îú‚îÄ‚îÄ User click button tr√™n Frontend
   ‚îú‚îÄ‚îÄ G·ª≠i l·ªánh qua WebSocket
   ‚îú‚îÄ‚îÄ Backend x·ª≠ l√Ω v√† g·ª≠i qua MQTT
   ‚îú‚îÄ‚îÄ Arduino nh·∫≠n v√† th·ª±c thi
   ‚îî‚îÄ‚îÄ Ph·∫£n h·ªìi tr·∫°ng th√°i v·ªÅ Frontend

================================================================================
                    CHI TI·∫æT T·ª™NG TH√ÄNH PH·∫¶N
================================================================================

üîß 1. ARDUINO ESP8266 (Thi·∫øt b·ªã IoT)

HARDWARE:
- ESP8266 WiFi module
- DHT11 sensor (nhi·ªát ƒë·ªô, ƒë·ªô ·∫©m)
- PIR motion sensor (ph√°t hi·ªán chuy·ªÉn ƒë·ªông)
- LED indicator
- Relay module (ƒëi·ªÅu khi·ªÉn ƒë√®n)

CH·ª®C NƒÇNG:
a) K·∫øt n·ªëi m·∫°ng:
   - K·∫øt n·ªëi WiFi v·ªõi SSID "405 wifi"
   - K·∫øt n·ªëi MQTT broker t·∫°i IP 192.168.1.5:1883
   - Client ID: "esp8266_client"

b) ƒê·ªçc c·∫£m bi·∫øn (m·ªói 3 gi√¢y):
   - DHT11: ƒë·ªçc nhi·ªát ƒë·ªô v√† ƒë·ªô ·∫©m
   - PIR: ƒë·ªçc tr·∫°ng th√°i chuy·ªÉn ƒë·ªông
   - LED indicator: hi·ªÉn th·ªã tr·∫°ng th√°i motion

c) G·ª≠i d·ªØ li·ªáu MQTT:
   - Topic "iot/temperature": gi√° tr·ªã nhi·ªát ƒë·ªô
   - Topic "iot/humidity": gi√° tr·ªã ƒë·ªô ·∫©m  
   - Topic "iot/motion": tr·∫°ng th√°i motion (0/1)

d) Nh·∫≠n l·ªánh ƒëi·ªÅu khi·ªÉn:
   - Subscribe topic "iot/light"
   - Nh·∫≠n l·ªánh 1: b·∫≠t ƒë√®n
   - Nh·∫≠n l·ªánh 0: t·∫Øt ƒë√®n

LU·ªíNG CH·∫†Y ARDUINO:
1. setup():
   - Kh·ªüi t·∫°o Serial (115200 baud)
   - C·∫•u h√¨nh GPIO pins
   - Kh·ªüi t·∫°o DHT sensor
   - K·∫øt n·ªëi WiFi
   - K·∫øt n·ªëi MQTT broker
   - Subscribe topic "iot/light"

2. loop():
   - Ki·ªÉm tra k·∫øt n·ªëi MQTT
   - ƒê·ªçc PIR sensor v√† g·ª≠i qua MQTT
   - M·ªói 3 gi√¢y: ƒë·ªçc DHT v√† g·ª≠i qua MQTT
   - X·ª≠ l√Ω callback MQTT messages
   - Delay 100ms

================================================================================

üñ•Ô∏è 2. BACKEND NODE.JS SERVER

C·∫§U TR√öC TH∆Ø M·ª§C:
- server.js: Entry point
- config/database.js: K·∫øt n·ªëi MySQL
- services/mqttService.js: X·ª≠ l√Ω MQTT
- services/webSocketService.js: X·ª≠ l√Ω WebSocket
- routes/auth.js: API x√°c th·ª±c
- routes/sensors.js: API sensor data
- middleware/auth.js: JWT authentication

CH·ª®C NƒÇNG CH√çNH:

a) MQTT Service (mqttService.js):
   - K·∫øt n·ªëi MQTT broker
   - Subscribe topics: iot/temperature, iot/humidity, iot/motion
   - Nh·∫≠n d·ªØ li·ªáu t·ª´ Arduino
   - L∆∞u v√†o database theo user_id
   - Broadcast qua WebSocket
   - Cache d·ªØ li·ªáu ƒë·ªÉ t·ªëi ∆∞u performance

b) WebSocket Service (webSocketService.js):
   - X√°c th·ª±c JWT token
   - Qu·∫£n l√Ω k·∫øt n·ªëi clients
   - Nh·∫≠n l·ªánh ƒëi·ªÅu khi·ªÉn t·ª´ Frontend
   - G·ª≠i d·ªØ li·ªáu real-time ƒë·∫øn Frontend
   - Broadcast sensor data

c) Authentication (auth.js):
   - Register user m·ªõi
   - Login v·ªõi username/email
   - JWT token generation
   - Password hashing v·ªõi bcrypt

d) Sensor API (sensors.js):
   - GET /latest: L·∫•y d·ªØ li·ªáu m·ªõi nh·∫•t
   - GET /history: L·∫•y l·ªãch s·ª≠ d·ªØ li·ªáu
   - POST /control-light: ƒêi·ªÅu khi·ªÉn ƒë√®n
   - GET /stats: Th·ªëng k√™ d·ªØ li·ªáu

LU·ªíNG CH·∫†Y BACKEND:
1. Kh·ªüi ƒë·ªông server:
   - Load environment variables
   - K·∫øt n·ªëi database MySQL
   - Kh·ªüi t·∫°o MQTT service
   - Kh·ªüi t·∫°o WebSocket service
   - Start HTTP server

2. X·ª≠ l√Ω MQTT messages:
   - Nh·∫≠n d·ªØ li·ªáu t·ª´ Arduino
   - Validate v√† parse d·ªØ li·ªáu
   - L∆∞u v√†o database theo user_id
   - Broadcast qua WebSocket

3. X·ª≠ l√Ω WebSocket:
   - Authenticate connection
   - Handle light control commands
   - Send real-time data
   - Manage client connections

================================================================================

üåê 3. FRONTEND REACT APP

C·∫§U TR√öC:
- src/App.js: Main component
- src/components/Dashboard.js: Dashboard ch√≠nh
- src/components/Login.js: Form ƒëƒÉng nh·∫≠p
- src/components/Register.js: Form ƒëƒÉng k√Ω

CH·ª®C NƒÇNG CH√çNH:

a) Authentication:
   - Login/Register forms
   - JWT token storage (localStorage)
   - Protected routes
   - Auto logout khi token h·∫øt h·∫°n

b) Dashboard Real-time:
   - Hi·ªÉn th·ªã nhi·ªát ƒë·ªô, ƒë·ªô ·∫©m real-time
   - Hi·ªÉn th·ªã tr·∫°ng th√°i motion detection
   - ƒêi·ªÅu khi·ªÉn ƒë√®n b·∫≠t/t·∫Øt
   - Hi·ªÉn th·ªã th·ªùi gian v√† l·ªãch tr√¨nh t·ª± ƒë·ªông
   - Alert system v·ªõi √¢m thanh

c) WebSocket Connection:
   - K·∫øt n·ªëi WebSocket v·ªõi JWT token
   - Nh·∫≠n d·ªØ li·ªáu real-time
   - G·ª≠i l·ªánh ƒëi·ªÅu khi·ªÉn
   - Handle connection status

d) Alert System:
   - C·∫£nh b√°o nhi·ªát ƒë·ªô cao/th·∫•p
   - C·∫£nh b√°o ƒë·ªô ·∫©m cao/th·∫•p
   - C·∫£nh b√°o motion ban ƒë√™m
   - √Çm thanh c·∫£nh b√°o
   - Google Sheets logging

e) Auto Control:
   - T·ª± ƒë·ªông b·∫≠t ƒë√®n l√∫c 7:00 GMT+7
   - T·ª± ƒë·ªông t·∫Øt ƒë√®n l√∫c 23:00 GMT+7
   - Ch·∫ø ƒë·ªô ban ƒë√™m (22:00-06:00)

LU·ªíNG CH·∫†Y FRONTEND:
1. Kh·ªüi ƒë·ªông app:
   - Check authentication token
   - Redirect to Login n·∫øu ch∆∞a auth
   - Load Dashboard n·∫øu ƒë√£ auth

2. Dashboard initialization:
   - K·∫øt n·ªëi WebSocket
   - Request latest data
   - Setup real-time updates
   - Initialize alert system

3. Real-time updates:
   - Nh·∫≠n sensor data qua WebSocket
   - Update UI components
   - Trigger alerts n·∫øu c·∫ßn
   - Log to Google Sheets

4. User interactions:
   - Click button ƒëi·ªÅu khi·ªÉn ƒë√®n
   - Send command qua WebSocket
   - Update UI immediately
   - Show confirmation

================================================================================

üóÑÔ∏è 4. DATABASE MYSQL

C·∫§U TR√öC B·∫¢NG:

a) users:
   - id (PRIMARY KEY)
   - username (UNIQUE)
   - password (HASHED)
   - email (UNIQUE)
   - phone
   - created_at, updated_at

b) dhtsensor:
   - id (PRIMARY KEY)
   - user_id (FOREIGN KEY)
   - humidity (DECIMAL)
   - temperature (DECIMAL)
   - time (TIMESTAMP)

c) motionsensor:
   - id (PRIMARY KEY)
   - user_id (FOREIGN KEY)
   - motion (TINYINT 0/1)
   - time (TIMESTAMP)

d) action:
   - id (PRIMARY KEY)
   - user_id (FOREIGN KEY)
   - status (TINYINT 0/1)
   - time (TIMESTAMP)

INDEXES:
- idx_dhtsensor_user_time
- idx_motionsensor_user_time  
- idx_action_user_time

LU·ªíNG L∆ØU TR·ªÆ:
1. DHT Data:
   - Cache temperature v√† humidity
   - L∆∞u c√πng l√∫c khi c√≥ ƒë·ªß 2 gi√° tr·ªã
   - M·ªói user c√≥ cache ri√™ng

2. Motion Data:
   - Ch·ªâ l∆∞u khi motion = 1
   - Debounce 2 gi√¢y gi·ªØa c√°c l·∫ßn l∆∞u
   - Track th·ªùi gian motion cu·ªëi

3. Action Data:
   - L∆∞u m·ªói l·∫ßn user ƒëi·ªÅu khi·ªÉn ƒë√®n
   - Status 0: t·∫Øt, 1: b·∫≠t

================================================================================

üîó 5. LU·ªíNG D·ªÆ LI·ªÜU CHI TI·∫æT

A) LU·ªíNG SENSOR DATA:
Arduino ‚Üí MQTT ‚Üí Backend ‚Üí Database + WebSocket ‚Üí Frontend

1. Arduino ƒë·ªçc sensor (3 gi√¢y/l·∫ßn):
   ```
   DHT11 ‚Üí temperature, humidity
   PIR ‚Üí motion (0/1)
   ```

2. G·ª≠i qua MQTT:
   ```
   iot/temperature: "30.80"
   iot/humidity: "75.00"  
   iot/motion: "1"
   ```

3. Backend nh·∫≠n v√† x·ª≠ l√Ω:
   ```
   MQTT Service ‚Üí Parse data ‚Üí Validate ‚Üí Cache ‚Üí Save DB ‚Üí Broadcast WS
   ```

4. Frontend nh·∫≠n v√† hi·ªÉn th·ªã:
   ```
   WebSocket ‚Üí Update state ‚Üí Re-render UI ‚Üí Check alerts
   ```

B) LU·ªíNG ƒêI·ªÄU KHI·ªÇN:
Frontend ‚Üí WebSocket ‚Üí Backend ‚Üí MQTT ‚Üí Arduino

1. User click button:
   ```
   Frontend ‚Üí toggleLight() ‚Üí WebSocket.send()
   ```

2. Backend x·ª≠ l√Ω:
   ```
   WebSocket ‚Üí handleLightControl() ‚Üí MQTT.publish()
   ```

3. Arduino nh·∫≠n v√† th·ª±c thi:
   ```
   MQTT callback ‚Üí digitalWrite(LIGHT, HIGH/LOW)
   ```

C) LU·ªíNG ALERT:
Sensor Data ‚Üí Alert Check ‚Üí Notification ‚Üí Google Sheets

1. Monitor sensor values:
   ```
   Temperature > 35¬∞C ‚Üí Danger alert
   Temperature > 30¬∞C ‚Üí Warning alert
   Humidity > 80% ‚Üí Warning alert
   Motion at night ‚Üí Danger alert
   ```

2. Alert processing:
   ```
   Check debounce ‚Üí Create alert ‚Üí Play sound ‚Üí Send to Google Sheets
   ```

================================================================================

‚öôÔ∏è 6. C√ÅC T√çNH NƒÇNG ƒê·∫∂C BI·ªÜT

A) REAL-TIME DASHBOARD:
- WebSocket connection cho real-time updates
- Auto-reconnect khi m·∫•t k·∫øt n·ªëi
- Immediate UI updates
- Connection status indicator

B) ALERT SYSTEM:
- Multi-level alerts (info, warning, danger)
- Sound notifications
- Debouncing ƒë·ªÉ tr√°nh spam
- Google Sheets logging
- Night mode detection

C) AUTO CONTROL:
- Schedule-based light control
- Timezone handling (GMT+7)
- Night mode (22:00-06:00)
- Automatic light on/off

D) SECURITY:
- JWT authentication
- Password hashing (bcrypt)
- Protected API routes
- WebSocket authentication
- User-specific data isolation

E) PERFORMANCE OPTIMIZATION:
- Database connection pooling
- MQTT message caching
- Debounced motion detection
- Efficient WebSocket broadcasting
- Indexed database queries

================================================================================

üöÄ 7. DEPLOYMENT & CONFIGURATION

A) HARDWARE SETUP:
1. Arduino ESP8266:
   - Upload code arduino_code_fixed.ino
   - C·∫•u h√¨nh WiFi credentials
   - C·∫•u h√¨nh MQTT broker IP
   - K·∫øt n·ªëi sensors v√† relay

2. MQTT Broker (Mosquitto):
   - Install Mosquitto
   - C·∫•u h√¨nh mosquitto.conf
   - Start service

B) SOFTWARE SETUP:
1. Backend:
   ```
   npm install
   c·∫•u h√¨nh config.env
   npm start
   ```

2. Database:
   ```
   Import database.sql
   C·∫•u h√¨nh connection trong config/database.js
   ```

3. Frontend:
   ```
   npm install
   npm start
   ```

C) ENVIRONMENT VARIABLES:
```
PORT=5000
DB_HOST=localhost
DB_USER=root
DB_PASSWORD=password
DB_NAME=iot_pj
JWT_SECRET=your_secret_key
MQTT_BROKER_URL=mqtt://192.168.1.5:1883
MQTT_CLIENT_ID=backend_client
```

================================================================================

üìä 8. MONITORING & DEBUGGING

A) LOGGING:
- Console logs cho t·∫•t c·∫£ operations
- Error handling v√† reporting
- WebSocket connection status
- MQTT connection status
- Database connection status

B) DEBUG ENDPOINTS:
- /api/health: Server status
- /api/ws-status: WebSocket status
- /api/debug/mqtt-cache: MQTT cache info
- /api/debug/database: Database status

C) PERFORMANCE METRICS:
- WebSocket clients count
- MQTT message rate
- Database query performance
- Memory usage
- CPU usage

================================================================================

üîß 9. TROUBLESHOOTING

A) COMMON ISSUES:
1. Arduino kh√¥ng k·∫øt n·ªëi WiFi:
   - Ki·ªÉm tra SSID/password
   - Ki·ªÉm tra signal strength

2. MQTT connection failed:
   - Ki·ªÉm tra broker IP/port
   - Ki·ªÉm tra network connectivity

3. WebSocket connection failed:
   - Ki·ªÉm tra JWT token
   - Ki·ªÉm tra server status

4. Database connection failed:
   - Ki·ªÉm tra MySQL service
   - Ki·ªÉm tra credentials

B) DEBUGGING STEPS:
1. Check Arduino Serial Monitor
2. Check Backend console logs
3. Check Frontend browser console
4. Check MQTT broker logs
5. Check database logs

================================================================================

üìà 10. SCALABILITY & FUTURE ENHANCEMENTS

A) SCALABILITY:
- Multiple Arduino devices
- Load balancing
- Database clustering
- Redis caching
- Microservices architecture

B) NEW FEATURES:
- Mobile app
- Voice control
- AI-powered automation
- Energy monitoring
- Security cameras
- Smart plugs
- Temperature scheduling

C) INTEGRATIONS:
- Google Home
- Amazon Alexa
- IFTTT
- Home Assistant
- SmartThings

================================================================================

üéØ K·∫æT LU·∫¨N

D·ª± √°n IoT Smart Home l√† m·ªôt h·ªá th·ªëng ho√†n ch·ªânh v·ªõi:
- Real-time monitoring v√† control
- Secure authentication
- Scalable architecture
- Comprehensive alert system
- User-friendly interface
- Robust error handling

H·ªá th·ªëng c√≥ th·ªÉ m·ªü r·ªông v√† t√≠ch h·ª£p th√™m nhi·ªÅu t√≠nh nƒÉng th√¥ng minh kh√°c trong t∆∞∆°ng lai.

================================================================================